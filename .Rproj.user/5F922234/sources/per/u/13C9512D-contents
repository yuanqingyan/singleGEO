



library(singleGEO)
MyDataBase<-GetGeoMetaDatabase(Sqlfile=NULL,Demo=FALSE)

MyOrganism<-c("Mus musculus","Homo sapiens")
search_kw1<-c("lung","pulmonary")
KeyList<-list(kw1=search_kw1)
MySearch<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                           Organism=MyOrganism, 
                           InputSearchList=KeyList)
colnames(MySearch)
unique(MySearch$gse)
head(MySearch[,c("title","gse")])
MySearch[MySearch$gse=="GSE158127","summary"][1]

Organism_hs<-c("Homo sapiens")
Data_platform<-c("scRNAseq","scATACseq")
search_kw_ade<-c("adenocarcinoma")
KeyList_ade<-list(kw_ad=search_kw_ade)
MySearch_ade<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                               Organism=Organism_hs,
                               InputSearchList=KeyList_ade,
                               Platform=Data_platform)
#> [1] "Database searching"
unique(MySearch_ade$gse)


MySearch_ade[MySearch_ade$gse=="GSE142285","title"][1]



MyOrganism_ms<-c("Mus musculus")
search_brain<-c("brain")
KeyList_brain<-list(kw_brain=search_brain)

MySearch_brain_scRNA<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                                       Organism=MyOrganism_ms,
                                       InputSearchList=KeyList_brain,
                                       Platform="scRNAseq")
#> [1] "Database searching"
MySearch_brain_scATAC<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                                        Organism=MyOrganism_ms,
                                        InputSearchList=KeyList_brain,
                                        Platform="scATACseq")
#> [1] "Database searching"
(Both_RNA_ATAC<-intersect(unique(MySearch_brain_scRNA$gse),
                          unique(MySearch_brain_scATAC$gse)))


MySearch_brain_scRNA[MySearch_brain_scRNA$gse==Both_RNA_ATAC[1],"overall_design"][1]

search_kw2<-c("fibrosis")
search_kw3<-c("new","novel")
search_kw4<-c("subtype","subpopulation")
KeyList_new<-list(kw1=search_kw1,
                  kw2=search_kw2,
                  kw3=search_kw3,
                  kw4=search_kw4)
MySearch_new<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                               Organism=MyOrganism_ms,
                               InputSearchList=KeyList_new)

unique(MySearch_new$gse)

MySearch_new[1,"title"]

MySearch_new$summary[1]
MySearch_new$overall_design[1]
gsm_info<-Get_GSMFromGSE(GeoDataBase=MyDataBase,
                         GSE.ID=MySearch_new$gse[1])
colnames(gsm_info)
gsm_info[,c("title","gsm")]


search_kw5<-c("fas-signaling","fas signaling","fas pathway","fas-pathway")
KeyList_fas<-list(kw1=search_kw1,
                  kw2=search_kw2,
                  kw5=search_kw5)
MySearch_fas<-Get_Keyword_Meta(GeoDataBase=MyDataBase,
                               Organism=MyOrganism_ms,
                               InputSearchList=KeyList_fas)
unique(MySearch_fas$gse)

MySearch_fas[1,"title"]
MySearch_fas$overall_design[1]

MySearch_fas$summary[1]
MySearch_fas$supplementary_file[1]





myGeoID<-c("GSE140032")
##Set DecompressFile=TRUE if you want to download and decompress the data in the same time
DownloadFileInfo<-Get_Geo_Data(DownGSEID=myGeoID,DecompressFile=FALSE)
DownloadFileInfo

ExtractFile(ExtractID=myGeoID,DecompressType=c("tar","gz"))
list.files("GSE140032")


data(testData_GSE134174)
test_meta<-testData_GSE134174$TwoMetaData
test_data<-testData_GSE134174$TwoRawData
list_GSE134174<-Splitdata_MakeDataList(InputData=test_data,Group=test_meta$Donor)
##The following code setting a big number of maxFeature,maxCount,maxMT and small number ##of minFeature,minCount will keep all the cells
seu_GSE134174<-MakeSeuObj_FromRawRNAData(RawList=list_GSE134174,
                                         GSE.ID="GSE134174",
                                         MinFeature=1,
                                         MaxFeature=750000,
                                         MinCount=1,
                                         MaxCount=4000000,
                                         MaxMT=100)
names(seu_GSE134174)

Seurat::DimPlot(seu_GSE134174[[1]],repel = TRUE)

seu_GSE134174_sct<-MakeSeuObj_FromRawRNAData(RawList=list_GSE134174,
                                             GSE.ID="GSE134174",
                                             MinFeature=1,
                                             MaxFeature=750000,
                                             MinCount=1,
                                             MaxCount=4000000,
                                             MaxMT=100,
                                             Norm.method = "sct")
names(seu_GSE134174_sct)


data(Norm_GSE134174)
seu_Norm_GSE134174<-MakeSeuObj_FromNormalizedRNAData(NormList=Norm_GSE134174,GSE.ID="GSE134174")
Seurat::DimPlot(seu_Norm_GSE134174[[1]],repel = TRUE)

list_Norm.sct_GSE134174<-lapply(seu_GSE134174_sct,function(x) Seurat::GetAssayData(x,slot="data"))
seu_Norm.sct_GSE134174<-MakeSeuObj_FromNormalizedRNAData(NormList=list_Norm.sct_GSE134174,Frow.which.Norm="sct",GSE.ID="GSE134174")
Seurat::DimPlot(seu_Norm.sct_GSE134174[[1]],repel = TRUE)

Int_GSE134174<-SeuObj_integration(Object.list=seu_GSE134174)
###Add additional meta data
row.names(test_meta)<-test_meta$Cell
test_meta<-test_meta[row.names(Int_GSE134174@meta.data),]
Int_GSE134174<-Seurat::AddMetaData(object=Int_GSE134174,metadata =as.data.frame(test_meta))
Seurat::DimPlot(Int_GSE134174,group.by="cluster_ident",label=TRUE,repel = TRUE)+ NoLegend()


Int_GSE134174_sct<-SeuObj_integration(Object.list=seu_GSE134174_sct,Frow.which.Norm="sct")
test_meta_sct<-test_meta[row.names(Int_GSE134174_sct@meta.data),]
Int_GSE134174_sct<-Seurat::AddMetaData(object=Int_GSE134174_sct,metadata =as.data.frame(test_meta_sct))
Seurat::DimPlot(Int_GSE134174_sct,group.by="cluster_ident",label=TRUE,repel = TRUE)+ NoLegend()



data(Dat_GSE54_GSE48)
RawDataList_GSE104154<-Dat_GSE54_GSE48$dat_GSE104154$RawDataList
meta_GSE104154<-Dat_GSE54_GSE48$dat_GSE104154$MetaData
row.names(meta_GSE104154)<-meta_GSE104154$Barcode
RawDataList_GSE161648<-Dat_GSE54_GSE48$dat_GSE161648$RawDataList
###make Seurat object fro the raw data
seu_GSE104154_raw<-MakeSeuObj_FromRawRNAData(RawList=RawDataList_GSE104154,
                                             GSE.ID="GSE104154",
                                             MtPattern='^mt-',
                                             MinFeature=1,
                                             MaxFeature=750000,
                                             MinCount=1, 
                                             MaxCount=4000000,
                                             MaxMT=100)
seu_GSE161648_raw<-MakeSeuObj_FromRawRNAData(RawList=RawDataList_GSE161648,GSE.ID="GSE161648",MtPattern='^mt-')
###Data integration
Int_GSE54_GSE48<-SeuObj_integration(Object.list=seu_GSE104154_raw,Object.list2=seu_GSE161648_raw)

###Evaluate the potential batch effect
Seurat::DimPlot(Int_GSE54_GSE48,group.by="orig.ident",split.by="GSE",repel = TRUE)

Seurat::DimPlot(Int_GSE54_GSE48,group.by="seurat_clusters",split.by="GSE",label=TRUE,repel = TRUE)+ NoLegend()


###Add annotation to GSE104154 as provided by the data submitter
Int_GSE54_GSE48$rowname<-row.names(Int_GSE54_GSE48@meta.data)
meta_subsetOfInt_GSE54<-subset(Int_GSE54_GSE48,GSE=="GSE104154")@meta.data
meta_subsetOfInt_GSE54$Barcode<-sapply(strsplit(meta_subsetOfInt_GSE54$rowname,split="\\_"),function(x) x[1])
ano_meta_subsetOfInt_GSE54<-dplyr::left_join(meta_subsetOfInt_GSE54,meta_GSE104154,by="Barcode")
row.names(ano_meta_subsetOfInt_GSE54)<-ano_meta_subsetOfInt_GSE54$rowname
ano_meta_subsetOfInt_GSE54<-ano_meta_subsetOfInt_GSE54[,c("rowname","defined")]
Int_GSE54_GSE48@meta.data<-dplyr::left_join(Int_GSE54_GSE48@meta.data,ano_meta_subsetOfInt_GSE54,by="rowname")
row.names(Int_GSE54_GSE48@meta.data)<-Int_GSE54_GSE48@meta.data$rowname
Int_GSE54_GSE48$defined<-ifelse(is.na(Int_GSE54_GSE48$defined),
                                paste(Int_GSE54_GSE48$seurat_clusters),Int_GSE54_GSE48$defined)

Seurat::DimPlot(Int_GSE54_GSE48,group.by="defined",split.by="GSE",label=TRUE,repel = TRUE)+ NoLegend()




Subset_GSE161648FromInt<-subset(Int_GSE54_GSE48,GSE=="GSE161648")
Subset_GSE161648FromInt$FasStatus<-ifelse(Subset_GSE161648FromInt$ID %in% c("GSM4911963_sixwkfasdel","GSM4911965_threewkfasdel"),"Loss","NoLoss")
tab_dat<-as.matrix(as.data.frame(unclass(table(Subset_GSE161648FromInt@meta.data[,c("FasStatus","defined")]))))
###PDGFrb is located in the cluster of 10. No obvious different is observed and loss of Fas signaling probably won't affect PDGFrb cell fraction.
(tab_pop<-prop.table(tab_dat, margin = 1))
dat_barplot<-data.frame(FasStatus=rep(c("Loss","NoLoss"),ncol(tab_pop)),
                        defined=rep(colnames(tab_pop),each=2),
                        Percentage=as.numeric(tab_pop))

pl<-ggplot2::ggplot(dat_barplot, aes(fill=defined, y=Percentage, x=FasStatus))+
  geom_bar(position="stack", stat="identity") + 
  theme_bw()
print(pl)




data(Data_Ref_transfer)
data(Data_Query_transfer)

Transfer_Result<-SeuObj_transfer(RefObj=Data_Ref_transfer,
                                 QueryObj=Data_Query_transfer, 
                                 RefLabel="defined")
Seurat::DimPlot(Transfer_Result, 
                group.by="predicted.RefLabel", 
                reduction = "umap",
                label=TRUE,
                repel = TRUE)+ NoLegend()
